\newcommand{\bSigma}{\ensuremath{\boldsymbol{\varSigma}}}
\newcommand{\bLambda}{\ensuremath{\boldsymbol{\varLambda}}}
\renewenvironment{Schunk}{\small}{}
<<echo=false,results=hide>>=
require(barebone)
require(vegan)
options(width=66)
@
\chapter{R Programming Interface to Multivariate Analysis}
\label{sec:basicmethods}

Short intro: the scope of this Appendix.
\section{Matrix Algebra in R}

\subsection{Basic Operations}

\subsection{Matrix Decomposition}

\section{Simulating Simple Communities}

Simulated communities are useful in studying the properties of the 
different multivariate methods. It is easier to understand and interpret
the results if we know the truth, 
i.e.~assumptions and parameters under which the community was generated.

The simplest thing one can do is to generate abundances for $i = 1,2,\ldots,n$
sites and for $j = 1,2,\ldots,m$ independent species based on random 
numbers from Poisson distribution:
\begin{eqnarray}
  Y_{ij} &\sim &Poisson(\lambda_{ij})\\
  \log(\lambda_{ij}) &=& X_i \vec{\beta}_j\;,
\end{eqnarray}
This is done in
<<echo=false>>=
dump("rspecies", file = "")
@
This function returns an \texttt{n} by \texttt{spp} matrix of species abundances.
The mean abundances are determined by \texttt{b} values of the intercept
<<>>=
rspecies(n=5, spp=2, b=c(2,4))
@
Other parameters can be added to model responses to environmental covariates
(note that now species responses are described elementvise in \texttt{b})
<<>>=
x <- rnorm(10)
rspecies(n=10, spp=2, b=list(c(2,1), c(1,2)), x=model.matrix(~x))
@
Covariates should be provided as model matrix, that can be done easily by the 
formula interface of the \texttt{model.matrix} function.

\section{R Programming of Ordination Methods}

\subsection{Unconstrained Ordination}

\subsubsection{Principal Components Analysis (PCA)}

The simplest and numerically best method for PCA is equivalent to
singular value decomposition (SVD) of the data matrix. The SVD is
defined as
\begin{eqnarray}
  \vec{Y} &= \vec{U \bSigma V'}\;,
\end{eqnarray}
where \vec{\bSigma} is a diagonal matrix of singular values which are
square roots of eigen values $\vec{\bSigma = \bLambda}^{1/2}$, \vec{Y}
is the data matrix with centred columns, and \vec{U} and \vec{V} are
orthonormal matrices of row and column scores, so that $\vec{U'U} =
\vec{I}$ and $\vec{V'V} = \vec{I}$. The implementation is
straightforward:
<<echo=false>>=
dump("PCA", file = "")
@
The function returns a result of the R function \texttt{svd}. The only
optional argument is \texttt{scale} which defines how data is scaled
before the analysis. In general, the standard R function
\texttt{scale} transforms data as:
\begin{equation}
  \label{eq:PCAstand}
  y'_{ij} = \frac{y_{ij} - z_j}{s_j}\;,
\end{equation}
where $z_j$ is the column centre, and $s_j$ is the column
scale. Typically $z_j$ is the column average. With \texttt{scale =
  FALSE}, $s=1$ (or no scaling), and with \texttt{scale = TRUE}, $s_j$
are the variable (column) standard deviations. If data are scaled by
column standard deviations, all columns will have equal weight.  The
\texttt{scale} can also be a vector of scales. Using a constant
scale for all columns does not influence scores \vec{U} or \vec{V},
but it will influence the absolute singular values
\vec{\bSigma}---the proportions of individual elements $\sigma$ do
not change.  With the basic analysis, the singular values decompose
the original observed values, so that the sum of $\vec{\bSigma}^2$
equals the sum of $\vec{Y}^2$ for centred \vec{Y}. If we want the
singular values to decompose the variance of the data, we can call the
function as
<<>>=
data(dune)
str(PCA(dune, scale = rep(sqrt(nrow(dune)-1), ncol(dune))))
@
This divides columns with $\sqrt{n-1}$ so that the sum of
$\vec{\bSigma}^2$ equals the sum of variances of \vec{X}, and the
singular values are standard deviations of the axes.  Using scale
$\sqrt{n}$ would give the same results with biased esimate of variance.

SVD is the preferred method of performing PCA, but earlier PCA was
usually performed as eigen decomposition of symmetric crossproduct
matrix:
\begin{equation}
  \vec{Y'Y} = \vec{V \bLambda V'}\;,
\end{equation}
where \vec{\bLambda} is a diagonal matrix of eigenvalues. The row
scores can be found as
\begin{equation}
  \label{eq:PCAu}
  \vec{U} = \vec{Y' V \bLambda}^{-1/2}\;.
\end{equation}
The row and column scores \vec{U} and \vec{V} are identical to those
found in the previous methods (apart from possible sign reversals),
and $\vec{\bLambda} = \vec{\bSigma}^2$.
<<echo=false>>=
dump("PCAeig", file = "")
@
It is a common practice to omit multiplication with
$\vec{\bLambda}^{-1/2}$ in (\ref{eq:PCAu}) or, equivalently, division
by square roots of eigenvalues in \texttt{PCAeig}. In that case the
row scores \vec{U} are not orthonormal, but the sum of squares of each
column is proportional to square roots of eigenvalues. The equations
are:
\begin{eqnarray}
  \label{eq:PCAurot}
  \vec{U} &=& \vec{Y' V}\\
  \vec{U'U} &=& \vec{\bLambda}^{1/2 \;.}
\end{eqnarray}
With this scaling, \vec{U} are called \emph{scores matrix}, and
orthonormal \vec{V} are called \emph{loadings} or \emph{rotation
  matrix}: Multiplication with (\ref{eq:PCAurot}) rotates the centred
and scaled data matrix \vec{Y} to the principal components.

Function \texttt{PCAeig} used crossproduct \vec{Y'Y} to get the
symmetric matrix for eigen decomposition. Most PCA software use
instead covariance matrix. This is equivalent of finding the
crossproduct of centred \vec{Y} as $\vec{Y'Y} (n-1)^{-1}$. In this way
the eigenvalues sum up to total variance. Similarly, the scaled
solution is usually found using correlation matrix instead of explicit
scaling of response data with (\ref{eq:PCAstand}) like in SVD.

R functions are based on either of these algorithms:
\begin{itemize}
\item \texttt{prcomp} uses SVD, but it scales singular values by
  $\sqrt{n-1}$, and calls them standard deviations
  (\texttt{sdev}). Function also discards the orthonormal row scores
  that SVD returned \vec{U}, and instead uses (\ref{eq:PCAurot}) to
  find row scores scaled by eigenvalues (called \texttt{x}). The
  orthonormal column scores \vec{V} are called rotation.  The scaled
  solution is found by scaling the respone matrix with
  (\ref{eq:PCAstand}).
\item \texttt{princomp} uses eigen decomposition of covariance or
  correlation matrices. The function uses biased estimate of variance,
  so that the denominator is $n$ instead of $n-1$ of
  \texttt{prcomp}. The function returns square roots of eigenvalues
  and calls them standard deviations, just like in
  \texttt{prcomp}. However, the reported eigenvalues differ from
  \texttt{prcomp} which uses unbiased variance instead of biased
  variance of \texttt{princomp}.  The function uses (\ref{eq:PCAurot})
  to find row scores \vec{U}. The row scores are called
  \texttt{scores} and orthonormal column scores are called
  \texttt{loadings}.
\item \texttt{rda} in vegan package uses SVD in its PCA. The function
  returns singular values divided with $\sqrt{n-1}$ consinstently with
  \texttt{prcomp}.  Function returns orthonormal \vec{U} and
  \vec{V}. These are accessed via \texttt{scores} function in
  functions like \texttt{plot} and \texttt{summary} and then they are
  scaled. Vegan allows scaling either \vec{U} or \vec{V} by
  eigenvalues. In addition, there is a general scaling constant that
  tries to scale \vec{U} and \vec{V} so that they can be displayed in
  the same plot with equal scaling.
\end{itemize}

\subsubsection{Principal Coordinates Analysis}

\subsubsection{Correspondence Analysis}

Correspondence analysis (CA) is weighted PCA with Chi-square metrics
\citep{Nishisato80,Greenacre84, GreenacreHastie87}. Just like with
PCA, we can use SVD or eigen decomposition.

The SVD algorithm is based on \citet{GreenacreHastie87}:
\begin{enumerate}
\item Let \vec{Y} be the data matrix standardized to unit sum, and \vec{r}
  row sums and \vec{c} column sums of \vec{Y}. Perform weighted Chi-square
  transformation, where a typical element $\{\bar{y}_{ij}\} =
  \vec{\bar Y}$ is
  \begin{equation}
    \bar{y}_{ij} = \frac{y_{ij} - r_i c_j}{\sqrt{r_i c_j}} \;.
  \end{equation}
  This is obviously Chi-square transformation because by usual
  definition $\chi^2 = \sum \bar{y}_{ij}^2$.
\item Perform SVD  $\vec{\bar Y} = \vec{\tilde{U} \bSigma
    \tilde{V}'}$.
\item De-weight the solution by
  \begin{eqnarray}
    \vec{U}&=& \vec{D_r}^{-1/2} \vec{\tilde{U}}\\
    \vec{V}&=& \vec{D_c}^{-1/2} \vec{\tilde{V}} \;,
  \end{eqnarray}
  where $\vec{D_r}$ and $\vec{D_c}$ are diagonal matrices of row and
  column weights.
\end{enumerate}
Direct implementation in R is:
<<echo=false>>=
dump("CA", file = "")
@
This returns a result from SVD with row and column scores (\vec{V} and \vec{U}) and the singular values which are square roots of eigen values.

The eigen decomposition of a symmetric matrix is based on
\citet{Nishisato80}:
\begin{enumerate}
\item Let \vec{Y} be the response matrix standardized to unit sum and
  \vec{r} and \vec{c} vectors of its row and column sums. Find the
  weighted crossproduct matrix
  \begin{equation}
    \label{eq:CAmattrans}
    \vec{\bar Y' \bar Y} = \vec{D_c}^{-1/2} \vec{Y'} \vec{D_r}^{-1} \vec{Y} \vec{D_c}^{-1/2} \;,
  \end{equation}
  where $\vec{D_c}$ and $\vec{D_r}$ are diagonal matrices of column
  and row sums.
\item Perform eigen decomposition:
  \begin{equation}
    \label{eq:CAeigen}
    \vec{\bar Y' \bar Y} = \vec{\tilde V \bLambda \tilde V'} \;.
  \end{equation}
\item De-weight the column scores:
  \begin{equation}
    \vec{V} = \vec{D_c}^{-1/2} \vec{\tilde{V}} \;.
  \end{equation}
\item Find the row scores:
  \begin{equation}
    \vec{U} = \vec{D_r}^{-1} \vec{ Y V} \vec{\bLambda}^{-1/2} \;.
  \end{equation}
\item The original transformation (\ref{eq:CAmattrans}) was not
  centred, and the first eigen vector of (\ref{eq:CAeigen}) will be
  so called trivial solution of $\lambda=1$ to do the centring omitted
  earlier. We wish to discard this first trivial axis.
\end{enumerate}
Direct implementation in R is:
<<echo=false>>=
dump("CAeig", file="")
@

\subsection{Constrained Ordination}

In constrained ordination we have constraints or environmental
variables that restrict the ordination. The two basic methods are
Redundancy Analysis which is generalized from PCA, and Constrained
Correspondence Analysis which is generalized from CA.

\subsubsection{Redundancy Analysis}

When \citet{terBraak86} introduced Constrained or Canonical
Correspondence Analysis, he also suggested an algorithm with
alternating regression and weighted averaging steps. In regression
step, the site scores are found as linear combinations of constraints
(environmental variables), and in weighted averaging step site scores
are found from species scores. Redundancy analysis is similar but
weighted averaging is replaced with weighted summation step
\citep{terBraak86, Jongman87}. \citet{Palmer93} gives a remarkably
clear survey of this algorithm.

The \citet{terBraak86} algorithm is often taken as the definition of
the method of constrained ordination. However, we can achieve the same
results with some other algorithms. \citet{LegLeg98} showed that a
better way of obtaining all constrained axes simultaneously is to
analyse fitted values \vec{\hat Y} in:
\begin{equation}
  \label{eq:RDA.Yhat}
  \vec{\hat Y} = \vec{X} (\vec{X'X})^{-1} \vec{X'Y} \;,
\end{equation}
where \vec{Y} is the centred response matrix, and \vec{X} is the
centred model matrix of constraints (environmental variables).  The
constrained ordination solution is SVD of \vec{\hat Y}.  The model may
look tricky, but in fact it is a model of multiple linear regression
\citet[e.g]{Mardia79}. In other words, Redundancy Analysis is a PCA of
fitted values of a linear regression fitted separately for each column
using all constraining variables simultaneously as independent
variables.

Direct implementation of (\ref{eq:RDA.Yhat}) would be simple in R:
<<eval=false,results=hide>>=
X <- scale(X, scale = FALSE)
Y <- scale(Y, scale = FALSE)
Yhat <- X %*% solve(t(X) %*% X) %*% t(X) %*% Y
svd(Yhat)
@ 
However, this is not an optimal algorithm. The problem is
(\ref{eq:RDA.Yhat}) involves matrix inversion (\texttt{solve()}), and
the constraint matrix \vec{X} can be singular or nearly singular. With
completely singular matrices, we may use generalized inverses such as
function \texttt{ginv} in MASS \citep{MASS}, there is a real danger of
loss of numerical precision. Similarly as in linear regression, it is
better to use QR decomposition \citep{BlueBook}. 

This approach finds the row scores \vec{U} that are linear
combinations of constraints and the corresponding column scores
\vec{V}.  The alternating regression and weighted sums algorithm also
finds row scores \vec{W} that are weighted sums of column scores. In
CA framework, they are weighted averages, and consequently called
weighted average or WA scores \citep{Palmer93}. In direct regression
approach they must be estimated separately as
\begin{equation}
  \label{eq:RDA.W}
  \vec{W} = \vec{Y V \bSigma}^{-1}
\end{equation}

The analysis of \vec{\hat Y} gives the constrained part analysis. The
analysis of the residuals $\vec{Y} - \vec{\hat Y}$ gives the residual
unconstrained analysis.

Putting this all together gives the following algorithm:
\begin{enumerate}
\item Let \vec{Y} be centred response matrix, and \vec{X} centred
  model matrix of constraints, and find QR decomposition of \vec{X}
  and with this matrix of fitted values \vec{\hat Y}.
\item Perform SVD of $\vec{\hat Y} = \vec{U \bSigma V'}$ with
  orthonormal column and row matrices \vec{U} and \vec{V}, and
  diagonal matrix of singular values \bSigma.
\item Find the' ``WA scores'' \vec{W} with (\ref{eq:RDA.W}).
\item Find the residual ordination of unconstrained component by
  peforming SVD of $\vec{Y} - \vec{\hat Y} = \vec{U_u \bSigma_u V'_u}$.
\end{enumerate}
Direct implementation is:
<<echo=false>>=
dump("RDA", file="")
@
<<echo=false>>=
dump("pRDA", file="")
@

\subsubsection{Constrained Correspondence Analysis}

<<echo=false>>=
dump("pCCA", file="")
@

\endinput
